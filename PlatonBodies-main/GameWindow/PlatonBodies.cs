//using OpenTK.Mathematics;
using OpenTK;
using System;
using System.IO;

namespace PlatonBodies
{
    public class PlatonBodies
    {

        // Piramide
        public readonly float[] piramide_vertices =
        {
            // Position       

            -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f, // bottom
            0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,
            -0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,

            0.5f, 0.0f, 0.5f, 0.0f, -1.0f, 0.0f,
            -0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f,
            0.5f, 0.0f, -0.5f, 0.0f, -1.0f, 0.0f,

        };

        // Octaedr
        public readonly float[] octaedr_vertices =
        {
            // Position       

            -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // top-forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // top-left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // top-right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, 0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // top-back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, 0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

           -0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,  // bottom-forward
            0.5f, 0.0f, -0.5f, 0.0f, -2.0f, 2.0f,
            0.0f, -0.5f, 0.0f, 0.0f, -2.0f, 2.0f,

            -0.5f, 0.0f, -0.5f, 2.0f, -2.0f, 0.0f, // bottom-left
            -0.5f, 0.0f, 0.5f, 2.0f, -2.0f, 0.0f,
            0.0f, -0.5f, 0.0f, 2.0f, -2.0f, 0.0f,

            0.5f, 0.0f, -0.5f, 2.0f, 2.0f, 0.0f, // bottom-right
            0.5f, 0.0f, 0.5f, 2.0f, 2.0f, 0.0f,
            0.0f, -0.5f, 0.0f, 2.0f, 2.0f, 0.0f,

            -0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f, // bottom-back
            0.5f, 0.0f, 0.5f, 0.0f, 2.0f, 2.0f,
            0.0f, -0.5f, 0.0f, 0.0f, 2.0f, 2.0f,

        };

        // Cube
        public readonly float[] cube_vertices =
        {
             // Position          Normal
            -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, // Front face
             0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
             0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
             0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
            -0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
            -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

            -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, // Back face
             0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
            -0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,
            -0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,

            -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f, // Left face
            -0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
            -0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

             0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f, // Right face
             0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

            -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, // Bottom face
             0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
             0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
            -0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
            -0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

            -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, // Top face
             0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
             0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
            -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
            -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
        };

        // Додекаэдр
        public readonly float[] dodecahedron_vertices =
        {
            -1.0f, 1.0f, 1.0f,   // 0   A
            0.0f, 0.59f, 1.7f,   // 1   B
            0.0f, -0.59f, 1.7f,  // 2   C
            -1.0f, -1.0f, 1.0f,  // 3   D
            -1.7f, 0.0f, 0.59f,  // 4   E
            1.0f, 1.0f, 1.0f,    // 5   F
            1.7f, 0.0f, 0.59f,   // 6   G
            1.0f, -1.0f, 1.0f,   // 7   H
            0.59f, 1.7f, 0.0f,   // 8   I
            -0.59f, 1.7f, 0.0f,  // 9   J
            -1.0f, 1.0f, -1.0f,  // 10  K
            -1.7f, 0.0f, -0.59f, // 11  L
            -1.0f, -1.0f, -1.0f, // 12  M
            -0.59f, -1.7f, 0.0f, // 13  N
            0.59f, -1.7f, 0.0f,  // 14  O
            1.0f, 1.0f, -1.0f,   // 15  P
            0.0f, 0.59f, -1.7f,  // 16  Q
            1.7f, 0.0f, -0.59f,  // 17  R
            0.0f, -0.59f, -1.7f, // 18  S
            1.0f, -1.0f, -1.0f   // 19  T
        };

        public readonly uint[] dodecahedron_indices =
        {
            0, 1, 2, 0, 2, 4, 2, 3, 4,          // 0 // Upper 
            3, 2, 13, 2, 13, 7, 13, 7, 14,      // 1
            7, 2, 1, 7, 1, 6, 1, 5, 6,          // 2
            5, 1, 0, 5, 0, 8, 0, 8, 9,          // 3

            0, 4, 11, 0, 11, 10, 0, 10, 9,      // 4 // Middle
            3, 13, 12, 3, 12, 11, 3, 11, 4,     // 5
            7, 6, 17, 7, 17, 19, 7, 19, 14,     // 6
            5, 8, 15, 5, 15, 17, 5, 17, 6,      // 7

            8, 9, 10, 8, 10, 16, 8, 16, 15,     // 8 // Bottom
            11, 12, 18, 11, 18, 16, 11, 16, 10, // 9
            13, 14, 19, 13, 19, 18, 13, 18, 12, // 10
            17, 15, 16, 17, 16, 18, 17, 18, 19  // 11
        };

        public readonly float[] dodecahedron_normals = // из normals.txt благодаря findNormal()
        {
             0.57346237f,0f,-0.81923187f,
            0.051464625f,0.8279367f,-0.5584552f,
            -0.57346237f,0f,-0.81923187f,
            -0f,-0.8628834f,-0.5054031f,
            0.81923187f,-0.57346237f,0f,
            0.8628834f,0.5054031f,0f,
            -0.81923187f,0.57346237f,0f,
            -0.8628834f,-0.5054031f,-0f,
            0f,-0.8192319f,0.57346237f,
            0.5584552f,0.051464617f,0.82793665f,
            -0f,0.8192319f,0.57346237f,
            -0.5584552f,-0.051464617f,0.82793665f
        };

        public readonly float[] dodecahedron_vertices_normals =
        {
            // Position    Normal
            -1f,1f,1f,  -0.57346237f,-0f,0.81923187f,
            0f,0.59f,1.7f,  -0.57346237f,-0f,0.81923187f,
            0f,-0.59f,1.7f,  -0.57346237f,-0f,0.81923187f,
            -1f,1f,1f,  -0.57346237f,-0f,0.81923187f,
            0f,-0.59f,1.7f,  -0.57346237f,-0f,0.81923187f,
            -1.7f,0f,0.59f,  -0.57346237f,-0f,0.81923187f,
            0f,-0.59f,1.7f,  -0.57346237f,-0f,0.81923187f,
            -1f,-1f,1f,  -0.57346237f,-0f,0.81923187f,
            -1.7f,0f,0.59f,  -0.57346237f,-0f,0.81923187f,
            -1f,-1f,1f,  -0.051464625f,-0.8279367f,0.5584552f,
            0f,-0.59f,1.7f,  -0.051464625f,-0.8279367f,0.5584552f,
            -0.59f,-1.7f,0f,  -0.051464625f,-0.8279367f,0.5584552f,
            0f,-0.59f,1.7f,  -0.051464625f,-0.8279367f,0.5584552f,
            -0.59f,-1.7f,0f,  -0.051464625f,-0.8279367f,0.5584552f,
            1f,-1f,1f,  -0.051464625f,-0.8279367f,0.5584552f,
            -0.59f,-1.7f,0f,  -0.051464625f,-0.8279367f,0.5584552f,
            1f,-1f,1f,  -0.051464625f,-0.8279367f,0.5584552f,
            0.59f,-1.7f,0f,  -0.051464625f,-0.8279367f,0.5584552f,
             1f,-1f,1f,  0.57346237f,-0f,0.81923187f,
            0f,-0.59f,1.7f,  0.57346237f,-0f,0.81923187f,
            0f,0.59f,1.7f,  0.57346237f,-0f,0.81923187f,
            1f,-1f,1f,  0.57346237f,-0f,0.81923187f,
            0f,0.59f,1.7f,  0.57346237f,-0f,0.81923187f,
            1.7f,0f,0.59f,  0.57346237f,-0f,0.81923187f,
            0f,0.59f,1.7f,  0.57346237f,-0f,0.81923187f,
            1f,1f,1f,  0.57346237f,-0f,0.81923187f,
            1.7f,0f,0.59f,  0.57346237f,-0f,0.81923187f,
            1f,1f,1f,  0f,0.8628834f,0.5054031f,
            0f,0.59f,1.7f,  0f,0.8628834f,0.5054031f,
            -1f,1f,1f,  0f,0.8628834f,0.5054031f,
            1f,1f,1f,  0f,0.8628834f,0.5054031f,
            -1f,1f,1f,  0f,0.8628834f,0.5054031f,
            0.59f,1.7f,0f,  0f,0.8628834f,0.5054031f,
            -1f,1f,1f,  0f,0.8628834f,0.5054031f,
            0.59f,1.7f,0f,  0f,0.8628834f,0.5054031f,
            -0.59f,1.7f,0f,  0f,0.8628834f,0.5054031f,
            -1f,1f,1f,  -0.81923187f,0.57346237f,-0f,
            -1.7f,0f,0.59f,  -0.81923187f,0.57346237f,-0f,
            -1.7f,0f,-0.59f,  -0.81923187f,0.57346237f,-0f,
            -1f,1f,1f,  -0.81923187f,0.57346237f,-0f,
            -1.7f,0f,-0.59f,  -0.81923187f,0.57346237f,-0f,
            -1f,1f,-1f,  -0.81923187f,0.57346237f,-0f,
            -1f,1f,1f,  -0.81923187f,0.57346237f,-0f,
            -1f,1f,-1f,  -0.81923187f,0.57346237f,-0f,
            -0.59f,1.7f,0f,  -0.81923187f,0.57346237f,-0f,
            -1f,-1f,1f,  -0.8628834f,-0.5054031f,-0f,
            -0.59f,-1.7f,0f,  -0.8628834f,-0.5054031f,-0f,
            -1f,-1f,-1f,  -0.8628834f,-0.5054031f,-0f,
            -1f,-1f,1f,  -0.8628834f,-0.5054031f,-0f,
            -1f,-1f,-1f,  -0.8628834f,-0.5054031f,-0f,
            -1.7f,0f,-0.59f,  -0.8628834f,-0.5054031f,-0f,
            -1f,-1f,1f,  -0.8628834f,-0.5054031f,-0f,
            -1.7f,0f,-0.59f,  -0.8628834f,-0.5054031f,-0f,
            -1.7f,0f,0.59f,  -0.8628834f,-0.5054031f,-0f,
            1f,-1f,1f,  0.81923187f,-0.57346237f,-0f,
            1.7f,0f,0.59f,  0.81923187f,-0.57346237f,-0f,
            1.7f,0f,-0.59f,  0.81923187f,-0.57346237f,-0f,
            1f,-1f,1f,  0.81923187f,-0.57346237f,-0f,
            1.7f,0f,-0.59f,  0.81923187f,-0.57346237f,-0f,
            1f,-1f,-1f,  0.81923187f,-0.57346237f,-0f,
            1f,-1f,1f,  0.81923187f,-0.57346237f,-0f,
            1f,-1f,-1f,  0.81923187f,-0.57346237f,-0f,
            0.59f,-1.7f,0f,  0.81923187f,-0.57346237f,-0f,
            1f,1f,1f,  0.8628834f,0.5054031f,0f,
            0.59f,1.7f,0f,  0.8628834f,0.5054031f,0f,
            1f,1f,-1f,  0.8628834f,0.5054031f,0f,
            1f,1f,1f,  0.8628834f,0.5054031f,0f,
            1f,1f,-1f,  0.8628834f,0.5054031f,0f,
            1.7f,0f,-0.59f,  0.8628834f,0.5054031f,0f,
            1f,1f,1f,  0.8628834f,0.5054031f,0f,
            1.7f,0f,-0.59f,  0.8628834f,0.5054031f,0f,
            1.7f,0f,0.59f,  0.8628834f,0.5054031f,0f,
            0.59f,1.7f,0f,  -0f,0.8192319f,-0.57346237f,
            -0.59f,1.7f,0f,  -0f,0.8192319f,-0.57346237f,
            -1f,1f,-1f,  -0f,0.8192319f,-0.57346237f,
            0.59f,1.7f,0f,  -0f,0.8192319f,-0.57346237f,
            -1f,1f,-1f,  -0f,0.8192319f,-0.57346237f,
            0f,0.59f,-1.7f,  -0f,0.8192319f,-0.57346237f,
            0.59f,1.7f,0f,  -0f,0.8192319f,-0.57346237f,
            0f,0.59f,-1.7f,  -0f,0.8192319f,-0.57346237f,
            1f,1f,-1f,  -0f,0.8192319f,-0.57346237f,
            -1.7f,0f,-0.59f,  -0.5584552f,-0.051464617f,-0.82793665f,
            -1f,-1f,-1f,  -0.5584552f,-0.051464617f,-0.82793665f,
            0f,-0.59f,-1.7f,  -0.5584552f,-0.051464617f,-0.82793665f,
            -1.7f,0f,-0.59f,  -0.5584552f,-0.051464617f,-0.82793665f,
            0f,-0.59f,-1.7f,  -0.5584552f,-0.051464617f,-0.82793665f,
            0f,0.59f,-1.7f,  -0.5584552f,-0.051464617f,-0.82793665f,
            -1.7f,0f,-0.59f,  -0.5584552f,-0.051464617f,-0.82793665f,
            0f,0.59f,-1.7f,  -0.5584552f,-0.051464617f,-0.82793665f,
            -1f,1f,-1f,  -0.5584552f,-0.051464617f,-0.82793665f,
            -0.59f,-1.7f,0f,  0f,-0.8192319f,-0.57346237f,
            0.59f,-1.7f,0f,  0f,-0.8192319f,-0.57346237f,
            1f,-1f,-1f,  0f,-0.8192319f,-0.57346237f,
            -0.59f,-1.7f,0f,  0f,-0.8192319f,-0.57346237f,
            1f,-1f,-1f,  0f,-0.8192319f,-0.57346237f,
            0f,-0.59f,-1.7f,  0f,-0.8192319f,-0.57346237f,
            -0.59f,-1.7f,0f,  0f,-0.8192319f,-0.57346237f,
            0f,-0.59f,-1.7f,  0f,-0.8192319f,-0.57346237f,
            -1f,-1f,-1f,  0f,-0.8192319f,-0.57346237f,
            1.7f,0f,-0.59f,  0.5584552f,0.051464617f,-0.82793665f,
            1f,1f,-1f,  0.5584552f,0.051464617f,-0.82793665f,
            0f,0.59f,-1.7f,  0.5584552f,0.051464617f,-0.82793665f,
            1.7f,0f,-0.59f,  0.5584552f,0.051464617f,-0.82793665f,
            0f,0.59f,-1.7f,  0.5584552f,0.051464617f,-0.82793665f,
            0f,-0.59f,-1.7f,  0.5584552f,0.051464617f,-0.82793665f,
            1.7f,0f,-0.59f,  0.5584552f,0.051464617f,-0.82793665f,
            0f,-0.59f,-1.7f,  0.5584552f,0.051464617f,-0.82793665f,
            1f,-1f,-1f,  0.5584552f,0.051464617f,-0.82793665f
        };

        //public void findNormal()
        //{
        //    Vector3 temp = new Vector3(0.0f, 0.0f, 0.0f);
        //    for (int i = 0; i < dodecahedron_indices.Length; i += 3)
        //    {
        //        var a = dodecahedron_indices[i];
        //        var b = dodecahedron_indices[i + 1];
        //        var c = dodecahedron_indices[i + 2];

        //        Vector3 pointA = new Vector3(dodecahedron_vertices[a * 3], dodecahedron_vertices[a * 3 + 1], dodecahedron_vertices[a * 3 + 2]);
        //        Vector3 pointB = new Vector3(dodecahedron_vertices[b * 3], dodecahedron_vertices[b * 3 + 1], dodecahedron_vertices[b * 3 + 2]);
        //        Vector3 pointC = new Vector3(dodecahedron_vertices[c * 3], dodecahedron_vertices[c * 3 + 1], dodecahedron_vertices[c * 3 + 2]);

        //        Vector3 side1 = pointB - pointA;
        //        Vector3 side2 = pointC - pointA;
        //        Vector3 perp = Vector3.Cross(side1, side2);

        //        if (Vector3.Dot(pointB, perp) < 0)
        //        {
        //            perp *= -1;
        //        }
        //        perp = perp.Normalized();

        //        if (i % 9 == 0) temp = perp; // это для того, чтобы плоская грань имела одну нормаль, иначе будут типа артефактов на плоской грани

        //        perp = temp;

        //        //File.AppendAllText("normals.txt", perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') +
        //        //Environment.NewLine);

        //        File.AppendAllText("dodecahedron.txt", pointA.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') +
        //            ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);
        //        File.AppendAllText("dodecahedron.txt", pointB.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') +
        //            ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);
        //        File.AppendAllText("dodecahedron.txt", pointC.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') +
        //            ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);

        //    }
        //}

        public readonly float[] icosahedron_vertices =
        {
            0.0f, 1.0f, 1.618f,   // 0   A
            0.0f, -1.0f, 1.618f,  // 1   B
            0.0f, -1.0f, -1.618f, // 2   C
            0.0f, 1.0f, -1.618f,  // 3   D

            1.0f, 1.618f, 0.0f,   // 4   E
            -1.0f, 1.618f, 0.0f,  // 5   F
            -1.0f, -1.618f, 0.0f, // 6   G
            1.0f, -1.618f, 0.0f,  // 7   H

            1.618f, 0.0f, 1.0f,   // 8   I
            -1.618f, 0.0f, 1.0f,  // 9   J
            -1.618f, 0.0f, -1.0f, // 10  K
            1.618f, 0.0f, -1.0f,  // 11  L
        };

        public readonly uint[] icosahedron_indices =
        {
            0, 1, 8,
            0, 1, 9,
            0, 4, 5,
            0, 5, 9,
            0, 4, 8,
            1, 6, 7,
            1, 6, 9,
            1, 7, 8,
            8, 4, 11,
            8, 11, 7,
            9, 5, 10,
            9, 6, 10,
            4, 3, 11,
            4, 5, 3,
            6, 2, 10,
            6, 7, 2,
            7, 11, 2,
            5, 3, 10,
            2, 10, 3,
            2, 11, 3
        };

        public readonly float[] icosahedron_vertices_normals =
        {
            0f,1f,1.618f,  0.3568115f,0f,0.9341764f,
            0f,-1f,1.618f,  0.3568115f,0f,0.9341764f,
            1.618f,0f,1f,  0.3568115f,0f,0.9341764f,
            0f,1f,1.618f,  -0.3568115f,-0f,0.9341764f,
            0f,-1f,1.618f,  -0.3568115f,-0f,0.9341764f,
            -1.618f,0f,1f,  -0.3568115f,-0f,0.9341764f,
            0f,1f,1.618f,  0f,0.9341764f,0.3568115f,
            1f,1.618f,0f,  0f,0.9341764f,0.3568115f,
            -1f,1.618f,0f,  0f,0.9341764f,0.3568115f,
            0f,1f,1.618f,  -0.57735026f,0.5773503f,0.57735026f,
            -1f,1.618f,0f,  -0.57735026f,0.5773503f,0.57735026f,
            -1.618f,0f,1f,  -0.57735026f,0.5773503f,0.57735026f,
            0f,1f,1.618f,  0.57735026f,0.5773503f,0.57735026f,
            1f,1.618f,0f,  0.57735026f,0.5773503f,0.57735026f,
            1.618f,0f,1f,  0.57735026f,0.5773503f,0.57735026f,
            0f,-1f,1.618f,  0f,-0.9341764f,0.3568115f,
            -1f,-1.618f,0f,  0f,-0.9341764f,0.3568115f,
            1f,-1.618f,0f,  0f,-0.9341764f,0.3568115f,
            0f,-1f,1.618f,  -0.57735026f,-0.5773503f,0.57735026f,
            -1f,-1.618f,0f,  -0.57735026f,-0.5773503f,0.57735026f,
            -1.618f,0f,1f,  -0.57735026f,-0.5773503f,0.57735026f,
            0f,-1f,1.618f,  0.57735026f,-0.5773503f,0.57735026f,
            1f,-1.618f,0f,  0.57735026f,-0.5773503f,0.57735026f,
            1.618f,0f,1f,  0.57735026f,-0.5773503f,0.57735026f,
            1.618f,0f,1f,  0.9341764f,0.3568115f,0f,
            1f,1.618f,0f,  0.9341764f,0.3568115f,0f,
            1.618f,0f,-1f,  0.9341764f,0.3568115f,0f,
            1.618f,0f,1f,  0.9341764f,-0.3568115f,-0f,
            1.618f,0f,-1f,  0.9341764f,-0.3568115f,-0f,
            1f,-1.618f,0f,  0.9341764f,-0.3568115f,-0f,
            -1.618f,0f,1f,  -0.9341764f,0.3568115f,0f,
            -1f,1.618f,0f,  -0.9341764f,0.3568115f,0f,
            -1.618f,0f,-1f,  -0.9341764f,0.3568115f,0f,
            -1.618f,0f,1f,  -0.9341764f,-0.3568115f,-0f,
            -1f,-1.618f,0f,  -0.9341764f,-0.3568115f,-0f,
            -1.618f,0f,-1f,  -0.9341764f,-0.3568115f,-0f,
            1f,1.618f,0f,  0.5773503f,0.57735026f,-0.57735026f,
            0f,1f,-1.618f,  0.5773503f,0.57735026f,-0.57735026f,
            1.618f,0f,-1f,  0.5773503f,0.57735026f,-0.57735026f,
            1f,1.618f,0f,  -0f,0.9341764f,-0.3568115f,
            -1f,1.618f,0f,  -0f,0.9341764f,-0.3568115f,
            0f,1f,-1.618f,  -0f,0.9341764f,-0.3568115f,
            -1f,-1.618f,0f,  -0.5773503f,-0.57735026f,-0.57735026f,
            0f,-1f,-1.618f,  -0.5773503f,-0.57735026f,-0.57735026f,
            -1.618f,0f,-1f,  -0.5773503f,-0.57735026f,-0.57735026f,
            -1f,-1.618f,0f,  0f,-0.9341764f,-0.3568115f,
            1f,-1.618f,0f,  0f,-0.9341764f,-0.3568115f,
            0f,-1f,-1.618f,  0f,-0.9341764f,-0.3568115f,
            1f,-1.618f,0f,  0.5773503f,-0.57735026f,-0.57735026f,
            1.618f,0f,-1f,  0.5773503f,-0.57735026f,-0.57735026f,
            0f,-1f,-1.618f,  0.5773503f,-0.57735026f,-0.57735026f,
            -1f,1.618f,0f,  -0.5773503f,0.57735026f,-0.57735026f,
            0f,1f,-1.618f,  -0.5773503f,0.57735026f,-0.57735026f,
            -1.618f,0f,-1f,  -0.5773503f,0.57735026f,-0.57735026f,
            0f,-1f,-1.618f,  -0.3568115f,0f,-0.9341764f,
            -1.618f,0f,-1f,  -0.3568115f,0f,-0.9341764f,
            0f,1f,-1.618f,  -0.3568115f,0f,-0.9341764f,
            0f,-1f,-1.618f,  0.3568115f,-0f,-0.9341764f,
            1.618f,0f,-1f,  0.3568115f,-0f,-0.9341764f,
            0f,1f,-1.618f,  0.3568115f,-0f,-0.9341764f
        };

        //public void findIcosahedron()
        //{
        //    for (int i = 0; i < icosahedron_indices.Length; i += 3)
        //    {
        //        var a = icosahedron_indices[i];
        //        var b = icosahedron_indices[i + 1];
        //        var c = icosahedron_indices[i + 2];

        //        Vector3 pointA = new Vector3(icosahedron_vertices[a * 3], icosahedron_vertices[a * 3 + 1], icosahedron_vertices[a * 3 + 2]);
        //        Vector3 pointB = new Vector3(icosahedron_vertices[b * 3], icosahedron_vertices[b * 3 + 1], icosahedron_vertices[b * 3 + 2]);
        //        Vector3 pointC = new Vector3(icosahedron_vertices[c * 3], icosahedron_vertices[c * 3 + 1], icosahedron_vertices[c * 3 + 2]);

        //        Vector3 side1 = pointB - pointA;
        //        Vector3 side2 = pointC - pointA;
        //        Vector3 perp = Vector3.Cross(side1, side2);

        //        if (Vector3.Dot(pointB, perp) < 0)
        //        {
        //            perp *= -1;
        //        }
        //        perp = perp.Normalized();

        //        File.AppendAllText("icosahedron.txt", pointA.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);
        //        File.AppendAllText("icosahedron.txt", pointB.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);
        //        File.AppendAllText("icosahedron.txt", pointC.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + ", " + perp.ToString().Replace(',', '.').Replace(' ', ',').Replace('(', ' ').Replace(';', 'f').Replace(')', 'f') + "," + Environment.NewLine);
        //    }
        //}
    }
}
